// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils.proto

#ifndef PROTOBUF_utils_2eproto__INCLUDED
#define PROTOBUF_utils_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_utils_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDoubleImpl();
void InitDefaultsDouble();
void InitDefaultsDoubleArrayImpl();
void InitDefaultsDoubleArray();
inline void InitDefaults() {
  InitDefaultsDouble();
  InitDefaultsDoubleArray();
}
}  // namespace protobuf_utils_2eproto
namespace utils {
class Double;
class DoubleDefaultTypeInternal;
extern DoubleDefaultTypeInternal _Double_default_instance_;
class DoubleArray;
class DoubleArrayDefaultTypeInternal;
extern DoubleArrayDefaultTypeInternal _DoubleArray_default_instance_;
}  // namespace utils
namespace utils {

// ===================================================================

class Double : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:utils.Double) */ {
 public:
  Double();
  virtual ~Double();

  Double(const Double& from);

  inline Double& operator=(const Double& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Double(Double&& from) noexcept
    : Double() {
    *this = ::std::move(from);
  }

  inline Double& operator=(Double&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Double& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Double* internal_default_instance() {
    return reinterpret_cast<const Double*>(
               &_Double_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Double* other);
  friend void swap(Double& a, Double& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Double* New() const PROTOBUF_FINAL { return New(NULL); }

  Double* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Double& from);
  void MergeFrom(const Double& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Double* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:utils.Double)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  mutable int _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
  friend void ::protobuf_utils_2eproto::InitDefaultsDoubleImpl();
};
// -------------------------------------------------------------------

class DoubleArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:utils.DoubleArray) */ {
 public:
  DoubleArray();
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleArray(DoubleArray&& from) noexcept
    : DoubleArray() {
    *this = ::std::move(from);
  }

  inline DoubleArray& operator=(DoubleArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleArray* internal_default_instance() {
    return reinterpret_cast<const DoubleArray*>(
               &_DoubleArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DoubleArray* other);
  friend void swap(DoubleArray& a, DoubleArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleArray* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  double array(int index) const;
  void set_array(int index, double value);
  void add_array(double value);
  const ::google::protobuf::RepeatedField< double >&
      array() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:utils.DoubleArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > array_;
  mutable int _array_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_utils_2eproto::TableStruct;
  friend void ::protobuf_utils_2eproto::InitDefaultsDoubleArrayImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Double

// double value = 1;
inline void Double::clear_value() {
  value_ = 0;
}
inline double Double::value() const {
  // @@protoc_insertion_point(field_get:utils.Double.value)
  return value_;
}
inline void Double::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:utils.Double.value)
}

// -------------------------------------------------------------------

// DoubleArray

// repeated double array = 1;
inline int DoubleArray::array_size() const {
  return array_.size();
}
inline void DoubleArray::clear_array() {
  array_.Clear();
}
inline double DoubleArray::array(int index) const {
  // @@protoc_insertion_point(field_get:utils.DoubleArray.array)
  return array_.Get(index);
}
inline void DoubleArray::set_array(int index, double value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:utils.DoubleArray.array)
}
inline void DoubleArray::add_array(double value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:utils.DoubleArray.array)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleArray::array() const {
  // @@protoc_insertion_point(field_list:utils.DoubleArray.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleArray::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:utils.DoubleArray.array)
  return &array_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_utils_2eproto__INCLUDED
